<programlisting>
<![CDATA[
#!/usr/bin/env python
# noclergy_configSet.py

# Copyright (C) 2004 Kevin C. Baird
#
# This file is part of 'No Clergy'.
#
# No Clergy is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

from noclergy_markov import Markov
from noclergy_object import Object
import re

class ConfigSet(Object):
  def __init__(self):
  self.configDir = '/var/www/noclergy/'
  self.configFileName = self.configDir + 'config.txt'
  self.feedbackFileName = '/var/www/noclergy/feedback.html'
  self.instsL = []
  self.configsL = []
  self.transpositionL = []
  self.numMeasuresI = 10

  def alter(self, valueS):
  for config in self.configsL:
  config.alter(valueS)

  def makeEachConfig(self):
  """
  Uses self.instsL to make 1 Config instance for each instrument.
  """
  for inst in self.instsL:
  config = Config(inst)
  config.configDir = self.configDir
  config.configFileName = self.configFileName
  config.feedbackFileName = self.feedbackFileName
  config.numMeasuresI = self.numMeasuresI
  try:
  config.ticksI = self.ticksI
  config.masterTupletL = self.masterTupletL
  config.tempTupletL = self.tempTupletL
  config.topL = self.topL
  except:
  pass # if it fails, it's just mutating the config,
  # and won't need the timing data until later
  self.configsL.append(config)

  def readFeedback(self):
  """
  Use this to read user feedback used to alter pc variables.
  writeFile writes it out to the plain text file used by the Score Class.
  """
  try:
  feedbackFile = open(self.feedbackFileName, 'r')
  except:
  feedbackFile = open(self.feedbackFileName + '.orig', 'r')
  # read from the config.txt file, if it hasn't been written yet,
  # read from the config.txt.orig template
  feedbackFileL = feedbackFile.readlines()
  feedbackFile.close()
  for config in self.configsL:
  config.readFeedback(feedbackFileL)

  def readFile(self):
  """
  Reads pc variables from the plain text file, which have
  already been updated by readFeedback and the user data.
  TODO: separate by instrument.
  """
  fileread = open(self.configFileName, 'r')
  filereadL = fileread.readlines()
  fileread.close()
  for config in self.configsL:
  config.readFile(filereadL)
  for line in filereadL:
  if line[0] == '#':
  pass  # comment line, ignore
  elif re.search('number_of_measures = .*', line):
  mmS = re.findall('number_of_measures = .*', line)[0]
  mmS = re.split('= ', line)[1]
  self.numMeasuresI = int(mmS)
  

  def setInsts(self, instsL):
  """
  Sets the list of instruments in the piece, to allow 
  audience feedback that is differentiated by instrument.
  """
  self.instsL = instsL
  instsFile = open(self.configDir + 'insts.txt', 'r')
  for line in instsFile.readlines():
  instS = line.split(' ')[1]
  transpositionS = line.split(' ')[3].strip()
  transpositionI = int(transpositionS)
  self.transpositionL.append(transpositionI)
  instsFile.close()
  self.makeEachConfig()

  def setTiming(self, ticksI, masterTupletL, tempTupletL, topL):
  """
  """
  self.ticksI = ticksI
  self.masterTupletL = masterTupletL
  self.tempTupletL = tempTupletL
  self.topL = topL

  def writeFile(self):
  """
  Writes config variables into the working config file.
  """
  outputS = ''
  outputS += '# No Clergy config.txt, written by writeFile method\n'
  outputS += '# variable [space] = [space] [value]\n'
  #outputS += 'tupletpc = ' + str(self.tupletpcI) + '\n'
  #outputS += 'restpc = ' + str(self.restpcI) + '\n'
  #outputS += 'dynpc = ' + str(self.dynpcI) + '\n'
  #outputS += 'artpc = ' + str(self.artpcI) + '\n'
  outputS += '# inst_variable [space] = [space] [value]\n'
  for config in self.configsL:
  outputS += config.writeEach()
  outputS += 'number_of_measures = '
  outputS += str(self.numMeasuresI) + '\n'
  outputS += '# inst [space] name [space] = [space] [transposition value]\n'  
  for i in range(len(self.instsL)):
  instS = self.instsL[i]
  outputS += 'inst ' + instS + ' = '
  outputS += str(self.transpositionL[i]) + '\n'
  return outputS

#########################

class Config(Object):

  def __init__(self, instS):
  #self.instsL = []
  self.instS = instS
  #self.transpositionL = []
  self.modArtI = 0
  self.modDynI = 0
  self.modRestI = 0
  self.modTupletI = 0
  self.modArtS = ""
  self.modDynS = ""
  self.modRestS = ""
  self.modTupletS = ""
  self.artpcI = 0
  self.dynpcI = 0
  self.restpcI = 0
  self.tupletpcI = 0
  self.numMeasuresI = 10

  def alter(self, valueS):
  """
  Alter the variables used by the random generation of the score, 
  using the ampI value (-5 to 5) to indicate direction and amount 
  of the shift.
  """

  # ampI ranges from -5 to 5, excluding 0
  divisor = 3 # max feedback values shift the pc variable
  # divisor explained in self.getMod
  if valueS == 'art':
  ampI = self.modArtI
  mod = self.getMod(self.artpcI, ampI, divisor)
  self.artpcI += mod
  self.artpcI = self.bound(1, 99, self.artpcI)
  elif valueS == 'dyn':
  ampI = self.modDynI
  mod = self.getMod(self.dynpcI, ampI, divisor)
  self.dynpcI += mod
  self.dynpcI = self.bound(1, 99, self.dynpcI)
  elif valueS == 'rest':
  ampI = self.modRestI
  mod = self.getMod(self.restpcI, ampI, divisor)
  self.restpcI += mod
  self.restpcI = self.bound(1, 99, self.restpcI)
  elif valueS == 'tuplet':
  ampI = self.modTupletI
  mod = self.getMod(self.tupletpcI, ampI, divisor)
  self.tupletpcI += mod
  self.tupletpcI = self.bound(1, 99, self.tupletpcI)

  def bound_old(self, minval, maxval, value):
  """
  Returns value, ensuring that it is >= minval and <= maxval.
  """
  value = self.getMax(minval, value)
  value = self.getMin(maxval, value)
  return value
  
  def getMax_old(self, a, b):
  """
  Returns the greater of two arguments.
  """
  outputI = a
  if outputI < b:
  outputI = b
  return outputI

  def getMin_old(self, a, b):
  """
  Returns the lesser of two arguments.
  """
  outputI = a
  if outputI > b:
  outputI = b
  return outputI

  def getMod(self, pcI, ampI, divisor):
  """
  pcI is the characteristic to be altered
  ampI is the magnitude of change, from -5 to +5
  1/divisor is the portion of the available space to use up, 
  i.e., if the divisor is 2 and the ampI is +5, mod becomes 
  half the distance from current pcI to 100, and if the 
  divisor is 4 and the ampI is -5, mod becomes 1/4 the 
  distance from current pcI to 0.
  """
  div_useI = divisor * 5
  if ampI < 0:
  mod = (pcI * ampI) / div_useI
  # reduce by as much as 1/divisor
  else:
  mod = ((100 - pcI) * ampI) / div_useI
  # increase by as much as 1/divisor * upper margin
  return mod

  def readFeedback(self, feedbackFileL):
  """
  Use this to read user feedback used to alter pc variables.
  writeFile writes it out to the plain text file used by the Score Class.
  """
  readFeedbackB = 0
  for line in feedbackFileL:
  #print "DEBUG:", line
  if re.search('<!--begin-->', line):
  readFeedbackB = 1
  elif re.search('end 1 item', line):
  readFeedbackB = 0
  if readFeedbackB:
  if re.search(self.instS, line) or re.search('base', line):
    if re.search('art = .*', line):
    self.modArtS = re.findall('art = .*', line)[0]
  self.modArtS = re.split('= ', line)[1]
  try:
    self.modArtI = int(self.modArtS)
  except:
  self.modArtI = 0
  elif re.search('dyn = .*', line):
  self.modDynS = re.findall('dyn = .*', line)[0]
  self.modDynS = re.split('= ', line)[1]
  try:
    self.modDynI = int(self.modDynS)
  except:
  self.modDynI = 0
  #elif re.search('pitch = .*', line):
  #  self.modPitchS = re.findall('pitch = .*', line)[0]
  #  self.modPitchS = re.split('= ', line)[1]
  #  try:
  #  self.modPitchI = int(self.modPitchS)
  #  except:
  #  self.modPitchI = 0
  elif re.search('rest = .*', line):
  self.modRestS = re.findall('rest = .*', line)[0]
  self.modRestS = re.split('= ', line)[1]
  try:
  self.modRestI = int(self.modRestS)
  except:
  self.modRestI = 0
  #   elif re.search('tupletpc = .*', line):
  #  self.modTupletS = re.findall('tupletpc = .*', line)[0]
  #  self.modTupletS = re.split('= ', line)[1]
  #  try:
  #  self.modTupletI = int(self.modTupletS)
  #  except:
  #  self.modTupletI = 0
  elif re.search('end 1 item', line):
    readFeedbackB = 0

  def readFile(self, filereadL):
  """
  Reads pc variables from the plain text file, which have
  already been updated by readFeedback and the user data.
  """
  for line in filereadL:
  if line[0] == '#':
  pass  # comment line, ignore
  elif re.search(self.instS, line) or re.search('base', line):
  if re.search('tupletpc = .*', line):
    tupletS = re.findall('tupletpc = .*', line)[0]
  tupletS = re.split('= ', line)[1]
  self.tupletpcI = int(tupletS)
  elif re.search('restpc = .*', line):
  restS = re.findall('restpc = .*', line)[0]
  restS = re.split('= ', line)[1]
  self.restpcI = int(restS)
  elif re.search('dynpc = .*', line):
  dynS = re.findall('dynpc = .*', line)[0]
  dynS = re.split('= ', line)[1]
  self.dynpcI = int(dynS)
  elif re.search('artpc = .*', line):
  artS = re.findall('artpc = .*', line)[0]
  artS = re.split('= ', line)[1]
  self.artpcI = int(artS)
  #elif re.search('inst ', line):
  #   instTransS = re.findall('inst .*=.*', line)[0]
  #   instS = re.split(' ', instTransS)[1]
  #   transS = re.split('= ', instTransS)[1]
  #   self.instL.append(instS)
  #   self.transpositionL.append(int(transS))

  def writeEachInst_old(self, instS):
  """
  Writes pc variables into the working config file.
  """
  self.filewrite = open(self.configFileName, 'w')
  self.filewrite.write('# No Clergy config.txt, written by writeFile method\n')
  self.filewrite.write('tupletpc = ' + str(self.tupletpcI) + '\n')
  self.filewrite.write('restpc = ' + str(self.restpcI) + '\n')
  self.filewrite.write('dynpc = ' + str(self.dynpcI) + '\n')
  self.filewrite.write('artpc = ' + str(self.artpcI) + '\n')
  self.filewrite.write('number_of_measures = ')
  self.filewrite.write(str(self.numMeasuresI) + '\n')
  try:
  for i in len(self.instL):
  outputS = 'inst ' + self.instL[i] + ' = '
  outputS += str(self.transpositionL)
  self.filewrite.write(outputS + '\n')
  except:
  pass
  self.filewrite.close()

  def writeEach(self):
  """
  Writes pc variables into the working config file.
  """
  instS = self.instS
  outputS = ''
  outputS += instS + '_tupletpc = ' + str(self.tupletpcI) + '\n'
  outputS += instS + '_restpc = ' + str(self.restpcI) + '\n'
  outputS += instS + '_dynpc = ' + str(self.dynpcI) + '\n'
  outputS += instS + '_artpc = ' + str(self.artpcI) + '\n'
  return outputS
]]>
</programlisting>
